name: Sync and Enrich Bot Database

on:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: write
  pull-requests: write
  issues: write  # Required for PR labels

jobs:
  fetch-and-merge:
    name: Phase 1 - Fetch and Merge
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Pull from ai.robots.txt
        run: |
          python scripts/fetch_ai_robots.py
        continue-on-error: true
      
      - name: Pull from Cloudflare Radar
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          python scripts/fetch_cloudflare_radar.py
        continue-on-error: true
      
      - name: Merge and deduplicate
        run: |
          python scripts/merge_sources.py
      
      - name: Upload staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-merged
          path: staging/
          retention-days: 1

  enrich-with-ai:
    name: Phase 2 - AI Enrichment
    needs: fetch-and-merge
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Download staging artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-merged
          path: staging/

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          
      - name: Check if Ollama is already running
        id: ollama_check
        run: |
          if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            echo "Ollama is already running"
            echo "already_running=true" >> $GITHUB_OUTPUT
          else
            echo "Ollama is not running"
            echo "already_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Start Ollama service
        if: steps.ollama_check.outputs.already_running == 'false'
        run: |
          nohup ollama serve > /tmp/ollama.log 2>&1 &
          echo "Ollama service started"

      - name: Wait for Ollama to be ready
        run: |
          echo "Waiting for Ollama to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
              echo "✓ Ollama is ready!"
              exit 0
            fi
            echo "  Attempt $i/30: waiting..."
            sleep 2
          done
          echo "✗ Ollama failed to start"
          # Show logs if available
          if [ -f /tmp/ollama.log ]; then
            echo "Ollama logs:"
            cat /tmp/ollama.log
          fi
          exit 1
          
      - name: Pull Ollama model
        run: |
          echo "Pulling llama3.2 model..."
          ollama pull llama3.2
          echo "✓ Model pulled successfully"
          
      - name: Verify Ollama setup
        run: |
          echo "Verifying Ollama is working..."
          curl http://localhost:11434/api/tags
          echo ""
          echo "✓ Ollama is ready for enrichment"

      - name: Enrich with AI descriptions
        run: |
          echo "Starting AI enrichment..."
          python scripts/enrich_with_ai.py
          echo "AI enrichment completed!"
      
      - name: Fix any rating whitespace issues
        run: |
          python scripts/fix_ratings.py
      
      - name: Upload enriched artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-enriched
          path: staging/
          retention-days: 1

  generate-and-validate:
    name: Phase 3 - Generate Outputs and Create PR
    needs: enrich-with-ai
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}
          ref: main  # Ensure we're on the main branch
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Download enriched artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-enriched
          path: staging/
      
      - name: Check current state
        run: |
          echo "Current files in data/:"
          ls -lah data/ 2>/dev/null || echo "data/ does not exist"
          echo ""
          echo "Current files in docs/:"
          ls -lah docs/ 2>/dev/null || echo "docs/ does not exist"
          echo ""
          echo "Downloaded staging files:"
          ls -lah staging/
      
      - name: Generate JSON output (data/bots.json)
        run: |
          echo "Generating JSON output from enriched data..."
          python scripts/generate_outputs.py
          echo ""
          echo "✓ JSON generated at data/bots.json"
          
      - name: Validate JSON output
        run: |
          echo "Validating bot database..."
          python scripts/validate_data.py
          echo "✓ Validation passed"
      
      - name: Check for any changes
        id: check_changes
        run: |
          # Check if there are any changes in data/ or docs/
          if git diff --quiet data/ docs/ 2>/dev/null; then
            echo "No changes detected in output files"
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "skip_pr=true" >> $GITHUB_OUTPUT
          else
            echo "Changes detected!"
            echo ""
            echo "Changed files:"
            git diff --name-only data/ docs/ 2>/dev/null || echo "New files created"
            echo ""
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "skip_pr=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Show diff summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "## Changes Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Modified Files" >> $GITHUB_STEP_SUMMARY
          git diff --stat data/ docs/ >> $GITHUB_STEP_SUMMARY || echo "New files" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.PAT_TOKEN }}
          branch: bot-sync-${{ github.run_number }}
          delete-branch: true
          base: main
          title: '🤖 Weekly Bot Database Update'
          add-paths: |
            data/bots.json
            docs/BOTS.md
          commit-message: 'chore: update bot database [skip ci]'
          committer: GitHub Actions <noreply@github.com>
          author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
          body: |
            ## 🤖 Bot Database Sync
            
            This PR contains updates to the bot database.
            
            ### 📊 Data Sources
            - ✅ ai.robots.txt repository
            - ✅ Cloudflare Radar API (if available)
            - ✅ Local manual entries
            
            ### 🔄 Processing Steps
            1. ✅ Fetched latest bot data from sources
            2. ✅ Merged with existing data (deduplicated)
            3. ✅ AI-enriched new/incomplete bot entries
            4. ✅ Generated JSON output (`data/bots.json`)
            5. ✅ Generated Markdown documentation (`docs/BOTS.md`)
            6. ✅ Validated all data integrity
            
            ### 📝 What Changed
            
            The following files have been updated:
            - `data/bots.json` - Machine-readable bot database
            - `docs/BOTS.md` - Human-readable documentation
            
            ### ✅ Review Checklist
            - [ ] New bots have accurate descriptions
            - [ ] Category recommendations make sense
            - [ ] Technical details (IP ranges, ASN) are present
            - [ ] No sensitive information in descriptions
            - [ ] Markdown formatting looks correct
            
            ### 📈 Statistics
            See the workflow run for enrichment statistics and validation results.
            
            ---
            
            **Auto-generated by GitHub Actions**
            - Run: ${{ github.run_number }}
            - Workflow: ${{ github.workflow }}
            - Triggered: ${{ github.event_name }}
          labels: |
            bot-database
            automated
          assignees: ${{ github.repository_owner }}
          draft: false
        id: create_pr
      
      - name: PR Created Summary
        if: steps.check_changes.outputs.has_changes == 'true'
        run: |
          echo "## ✅ Pull Request Created!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "A pull request has been created with the updated bot database." >> $GITHUB_STEP_SUMMARY
          echo "Review and merge it to update the repository." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the changes in the PR" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the generated Markdown formatting" >> $GITHUB_STEP_SUMMARY
          echo "3. Verify new bot descriptions" >> $GITHUB_STEP_SUMMARY
          echo "4. Merge the PR to update the database" >> $GITHUB_STEP_SUMMARY
      
      - name: No Changes Summary
        if: steps.check_changes.outputs.has_changes == 'false'
        run: |
          echo "## ℹ️ No Changes Detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The bot database is already up to date." >> $GITHUB_STEP_SUMMARY
          echo "No pull request was created." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Possible Reasons" >> $GITHUB_STEP_SUMMARY
          echo "- No new
