name: Sync and Enrich Bot Database

on:
  schedule:
    - cron: '0 2 * * 0'  # Weekly on Sunday at 2 AM UTC
  workflow_dispatch:  # Allow manual triggers

permissions:
  contents: write
  pull-requests: write

jobs:
  fetch-and-merge:
    name: Phase 1 - Fetch and Merge
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Pull from ai.robots.txt
        run: |
          python scripts/fetch_ai_robots.py
        continue-on-error: true
      
      - name: Pull from Cloudflare Radar
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
        run: |
          python scripts/fetch_cloudflare_radar.py
        continue-on-error: true
      
      - name: Merge and deduplicate
        run: |
          python scripts/merge_sources.py
      
      - name: Upload staging artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-merged
          path: staging/
          retention-days: 1

  enrich-with-ai:
    name: Phase 2 - AI Enrichment
    needs: fetch-and-merge
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Download staging artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-merged
          path: staging/

      - name: Install Ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          
      - name: Check if Ollama is already running
        id: ollama_check
        run: |
          if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
            echo "Ollama is already running"
            echo "already_running=true" >> $GITHUB_OUTPUT
          else
            echo "Ollama is not running"
            echo "already_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Start Ollama service
        if: steps.ollama_check.outputs.already_running == 'false'
        run: |
          nohup ollama serve > /tmp/ollama.log 2>&1 &
          echo "Ollama service started"

      - name: Wait for Ollama to be ready
        run: |
          echo "Waiting for Ollama to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:11434/api/tags > /dev/null 2>&1; then
              echo "✓ Ollama is ready!"
              exit 0
            fi
            echo "  Attempt $i/30: waiting..."
            sleep 2
          done
          echo "✗ Ollama failed to start"
          # Show logs if available
          if [ -f /tmp/ollama.log ]; then
            echo "Ollama logs:"
            cat /tmp/ollama.log
          fi
          exit 1
          
      - name: Pull Ollama model
        run: |
          echo "Pulling llama3.2 model..."
          ollama pull llama3.2
          echo "✓ Model pulled successfully"
          
      - name: Verify Ollama setup
        run: |
          echo "Verifying Ollama is working..."
          curl http://localhost:11434/api/tags
          echo ""
          echo "✓ Ollama is ready for enrichment"

      - name: Enrich with AI descriptions
        run: |
          echo "Starting AI enrichment..."
          python scripts/enrich_with_ai.py
          echo "AI enrichment completed!"
      
      - name: Upload enriched artifacts
        uses: actions/upload-artifact@v4
        with:
          name: staging-enriched
          path: staging/
          retention-days: 1

generate-and-validate:
    name: Phase 3 - Generate Outputs
    needs: enrich-with-ai
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
      
      - name: Download enriched artifacts
        uses: actions/download-artifact@v4
        with:
          name: staging-enriched
          path: staging/
      
      - name: Generate outputs
        run: |
          python scripts/generate_outputs.py
      
      - name: Validate outputs
        run: |
          python scripts/validate_data.py
      
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet data/bots.json docs/BOTS.md; then
            echo "No changes detected"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Create Pull Request
        if: steps.check_changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: bot-sync-${{ github.run_number }}
          delete-branch: true
          title: 'Weekly Bot Database Update'
          add-paths: |
            data/bots.json
            docs/BOTS.md
          commit-message: 'chore: update bot database [skip ci]'
          body: |
            ## Bot Database Sync
            
            This PR contains updates to the bot database from:
            - ai.robots.txt repository
            - Cloudflare Radar API (if available)
            - Local manual entries
            
            ### What Changed
            - ✅ Fetched latest bot data
            - ✅ Merged and deduplicated entries
            - ✅ AI-enriched descriptions and recommendations
            - ✅ Generated JSON and Markdown outputs
            - ✅ Validated all data
            
            ### Review Checklist
            - [ ] Verify new bots have accurate descriptions
            - [ ] Check category recommendations make sense
            - [ ] Review any new operators
            - [ ] Ensure technical details are present
            
            **Auto-generated by GitHub Actions**
            
            Run number: ${{ github.run_number }}
            Workflow: ${{ github.workflow }}
          labels: |
            automated
            bot-database
          draft: false
      
      - name: Workflow Summary
        if: always()
        run: |
          echo "## Workflow Complete! 🎉" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_changes.outputs.has_changes }}" == "true" ]; then
            echo "✅ Changes detected and PR created" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ No changes detected" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Files Generated" >> $GITHUB_STEP_SUMMARY
          echo "- \`data/bots.json\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`docs/BOTS.md\`" >> $GITHUB_STEP_SUMMARY
